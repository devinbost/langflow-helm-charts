# Default values for langflow-runtime.

# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Replica count for the main application
replicaCount: 1

# Docker image settings
image:
  repository: "langflowai/langflow-backend"
  pullPolicy: IfNotPresent
  tag: ""

# Configuration for downloading flows
downloadFlows:
  path: /app/flows
  # flows:
  #   - url: https://raw.githubusercontent.com/langflow-ai/langflow/dev/tests/data/basic_example.json
  #     basicAuth: "myuser:mypassword"
  #     headers:
  #       Authorization: "Bearer my-key"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Environment variables for the main application
env:
  - name: LANGFLOW_LOG_LEVEL
    value: "INFO"
  # - name: OPENAI_API_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: langflow-secrets
  #       key: openai-key

service:
  type: ClusterIP
  port: 7860

ingress:
  enabled: false
  className: ""
  annotations: {}
    # Example annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
    # Example TLS configuration:
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /api/v1/version
    port: http
readinessProbe:
  httpGet:
    path: /api/v1/version
    port: http

volumes: []
  # Example volume configuration:
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
  # Example volumeMount configuration:
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# Secrets for sensitive data (Base64-encoded values)
secrets:
  # Base64-encoded environment variables from .env.docker
  ASTRA_DB_API_ENDPOINT: "<base64-encoded-value>"
  ASTRA_DB_APPLICATION_TOKEN: "<base64-encoded-value>"
  ASTRA_DB_NAMESPACE: "<base64-encoded-value>"
  OPENAI_API_KEY: "<base64-encoded-value>"
  COHERE_API_KEY: "<base64-encoded-value>"
  LANGCHAIN_TRACING_V2: "<base64-encoded-value>"
  LANGCHAIN_SESSION: "<base64-encoded-value>"
  LANGCHAIN_API_KEY: "<base64-encoded-value>"
  LANGFLOW_APPLICATION_TOKEN: "<base64-encoded-value>"
  FLOW_ID_OR_NAME: "<base64-encoded-value>"
  LANGFLOW_ID: "<base64-encoded-value>"
  LANGFLOW_BASE_URL: "<base64-encoded-value>"
  NEXT_PUBLIC_LANGFLOW_BASE_URL: "<base64-encoded-value>"
  OPENAI_KEY: "<base64-encoded-value>"
  ASTRA_DB_TOKEN: "<base64-encoded-value>"
  ASTRA_ENDPOINT: "<base64-encoded-value>"
  ASTRA_DB_DATABASE_ID: "<base64-encoded-value>"
  MYSQL_DB: "<base64-encoded-value>"
  MYSQL_USER: "<base64-encoded-value>"
  MYSQL_PASSWORD: "<base64-encoded-value>"
  MYSQL_HOST: "<base64-encoded-value>"
  DEBUG: "<base64-encoded-value>"
  LANGFLOW_LOG_LEVEL: "<base64-encoded-value>"
  OLLAMA_HOST: "<base64-encoded-value>"
  HUGGINGFACE_MODEL_PATH: "<base64-encoded-value>"
  PATH_SECURE_CONNECT_BUNDLE: "<base64-encoded-value>"

# Langflow application configurations
langflow:
  replicaCount: 1
  image:
    repository: "your-repo/langflow"
    pullPolicy: IfNotPresent
    tag: "latest"
  service:
    type: ClusterIP
    port: 7860
  downloadFlows:
    path: /app/flows
    # flows:
    #   - url: https://raw.githubusercontent.com/langflow-ai/langflow/dev/tests/data/basic_example.json
    #     basicAuth: "myuser:mypassword"
    #     headers:
    #       Authorization: "Bearer my-key"
  env: []  # Environment variables are loaded from the secret
  # If you have additional environment variables, you can add them here.
  volumeMounts:
    - name: langflow-data
      mountPath: /app/langflow
    - name: huggingface
      mountPath: /app/huggingface
    - name: secure-connect-bundle
      mountPath: /app/secure-connect-wikichat.zip
      subPath: secure-connect-wikichat.zip

# Next.js application configurations
nextjsApp:
  enabled: true
  replicaCount: 1
  image:
    repository: your-repo/nextjs-app
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3000
  env: []  # Environment variables are loaded from the secret
  # If you have additional environment variables, you can add them here.
  resources: {}
    # Example resource configuration:
    # requests:
    #   cpu: 0.5
    #   memory: 512Mi
    # limits:
    #   cpu: 1
    #   memory: 1Gi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}

# Ollama application configurations
ollama:
  enabled: true
  replicaCount: 1
  image:
    repository: ollama/ollama
    tag: latest
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 11434
  env: []  # Environment variables are loaded from the secret
  # If you have additional environment variables, you can add them here.
  volumes:
    models:
      hostPath: "/path/to/models"  # Adjust accordingly
  command: ["ollama", "serve"]
  resources: {}
    # Example resource configuration:
    # requests:
    #   cpu: 0.5
    #   memory: 1Gi
    # limits:
    #   cpu: 1
    #   memory: 2Gi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}

# MySQL database configurations
mysql:
  enabled: true
  replicaCount: 1
  image:
    repository: mysql
    tag: "8.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3306
  env: []  # Environment variables are loaded from the secret
  # The database credentials are stored in a Kubernetes Secret
  envSecret:
    MYSQL_ROOT_PASSWORD: "<base64-encoded-value>"
    MYSQL_DATABASE: "<base64-encoded-value>"
    MYSQL_USER: "<base64-encoded-value>"
    MYSQL_PASSWORD: "<base64-encoded-value>"
  volumeMounts:
    - name: mysql-init
      mountPath: /docker-entrypoint-initdb.d
  resources: {}
    # Example resource configuration:
    # requests:
    #   cpu: 0.5
    #   memory: 1Gi
    # limits:
    #   cpu: 1
    #   memory: 2Gi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}

# PostgreSQL database configurations
postgresql:
  enabled: true
  replicaCount: 1
  image:
    repository: postgres
    tag: "16"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 5432
  env:
    POSTGRES_DB: "langflow"
  envSecret:
    POSTGRES_USER: "<base64-encoded-value>"
    POSTGRES_PASSWORD: "<base64-encoded-value>"
  resources: {}
    # Example resource configuration:
    # requests:
    #   cpu: 0.5
    #   memory: 1Gi
    # limits:
    #   cpu: 1
    #   memory: 2Gi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}